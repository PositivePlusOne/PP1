rules_version = '2';
service firebase.storage {
  function guestPermissions() {
    return get(/databases/$(database)/documents/fl_permissions/guest).data
  }  

  function userPermissions(){
    return get(get(/databases/$(database)/documents/fl_users/$(request.auth.uid)).data.permissions).data
  }

  function isContentPermitted(schema, action) {
    return guestPermissions().content.production[schema][action] == true || (request.auth != null && (userPermissions().content.production[schema][action] == true || userPermissions().id == '1'))
  }

  function isCollectionPermitted(collection, action) {
    return guestPermissions()[collection][action] == true || (request.auth != null && userPermissions()[collection][action] == true)
  }

  function isCollectionPermittedProduction(collection, action) {
    return guestPermissions()[collection].production[action] == true || (request.auth != null && userPermissions()[collection].production[action] == true)
  }

  function isSettingsPermitted(settings, action) {
    return guestPermissions().settings[settings][action] == true || (request.auth != null && userPermissions().settings[settings][action] == true)
  }

  match /b/{bucket}/o {
    match /flamelink/{allPaths=**} {
      allow read: if isCollectionPermitted('media', 'view');
      allow update: if isCollectionPermitted('media', 'update');
      allow create: if isCollectionPermitted('media', 'create');
      allow delete: if isCollectionPermitted('media', 'delete');
    }
  }
}
